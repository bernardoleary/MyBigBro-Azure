<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Extensions.LifetimeScoping</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle">
            <summary>
            Defines a lifestyle that caches instances during the lifetime of an explictly defined scope using the
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>
            method. A scope is thread-specific, each thread should define its own scope. Scopes can be nested and
            nested scopes will get their own instance. Instances created by this lifestyle can be disposed when 
            the created scope gets <see cref="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope.Dispose">disposed</see>. 
            </summary>
            <example>
            The following example shows the usage of the <b>LifetimeScopeLifestyle</b> class:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            container.Register<IUnitOfWork, EntityFrameworkUnitOfWork>(new LifetimeScopeLifestyle());
            
            using (container.BeginLifetimeScope())
            {
                var instance1 = container.GetInstance<IUnitOfWork>();
                
                // This call will return the same instance.
                var instance2 = container.GetInstance<IUnitOfWork>();
                
                Assert.IsTrue(object.ReferenceEquals(instance1, instance2));
                
                // Create a nested scope.
                using (container.BeginLifetimeScope())
                {
                    // A nested scope gets its own instance.
                    var instance3 = container.GetInstance<IUnitOfWork>();
            
                    Assert.IsFalse(object.ReferenceEquals(instance1, instance3));
                
                    // This call will return the same instance.
                    var instance4 = container.GetInstance<IUnitOfWork>();
                    
                    Assert.IsTrue(object.ReferenceEquals(instance3, instance4));
                }
            }
            ]]></code>
            </example>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle"/> class. The instance
            will ensure that created and cached instance will be disposed after the execution of the web
            request ended and when the created object implements <see cref="T:System.IDisposable"/>.</summary>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle"/> class.</summary>
            <param name="disposeInstanceWhenLifetimeScopeEnds">
            Specifies whether the created and cached instance will be disposed when the created 
            <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> instance gets disposed and when the created object implements 
            <see cref="T:System.IDisposable"/>. 
            </param>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle.CreateRegistrationCore``2(SimpleInjector.Container)">
            <summary>
            Creates a new <see cref="T:SimpleInjector.Registration"/> instance defining the creation of the
            specified <typeparamref name="TImplementation"/> with the caching as specified by this lifestyle.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
            <param name="container">The <see cref="T:SimpleInjector.Container"/> instance for which a 
            <see cref="T:SimpleInjector.Registration"/> must be created.</param>
            <returns>A new <see cref="T:SimpleInjector.Registration"/> instance.</returns>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle.CreateRegistrationCore``1(System.Func{``0},SimpleInjector.Container)">
            <summary>
            Creates a new <see cref="T:SimpleInjector.Registration"/> instance defining the creation of the
            specified <typeparamref name="TService"/> using the supplied <paramref name="instanceCreator"/> 
            with the caching as specified by this lifestyle.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <param name="instanceCreator">A delegate that will create a new instance of 
            <typeparamref name="TService"/> every time it is called.</param>
            <param name="container">The <see cref="T:SimpleInjector.Container"/> instance for which a 
            <see cref="T:SimpleInjector.Registration"/> must be created.</param>
            <returns>A new <see cref="T:SimpleInjector.Registration"/> instance.</returns>
        </member>
        <member name="P:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle.Length">
            <summary>Gets the length of the lifestyle.</summary>
            <value>The <see cref="T:System.Int32"/> representing the length of this lifestyle.</value>
        </member>
        <member name="T:SimpleInjector.SimpleInjectorLifetimeScopeExtensions">
            <summary>
            Extension methods for enabling lifetime scoping for the Simple Injector.
            </summary>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)">
            <summary>
            Enables the lifetime scoping for the given <paramref name="container"/>. Lifetime scoping is
            enabled automatically when services get registered using one of the 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container)">RegisterLifetimeScope</see> overloads
            or making registrations using the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle"/>. When no services are 
            registered using this lifestyle, but lifetime scoping is still needed (for instance when you want 
            instances to be disposed at the end of a lifetime scope), lifetime scoping must be enabled explicitly.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``1(SimpleInjector.Container)">
            <summary>
            Registers that a single instance of <typeparamref name="TConcrete"/> will be returned for
            each lifetime scope that has been started using 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>. When the 
            lifetime scope is disposed and <typeparamref name="TConcrete"/> implements <see cref="T:System.IDisposable"/>,
            the cached instance will be disposed as well.
            Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TConcrete"/> has already been registered.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete"/> is a type
            that can not be created by the container.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container)">
            <summary>
            Registers that a single instance of <typeparamref name="TImplementation"/> will be returned for
            each lifetime scope that has been started using 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>. When the 
            lifetime scope is disposed and <typeparamref name="TImplementation"/> implements 
            <see cref="T:System.IDisposable"/>, the cached instance will be disposed as well.
            Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TService"/> has already been registered.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation"/> 
            type is not a type that can be created by the container.
            </exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``1(SimpleInjector.Container,System.Func{``0})">
            <summary>
            Registers the specified delegate that allows returning instances of <typeparamref name="TService"/>,
            and returned instances are cached during the lifetime of a given scope that has been started using
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>. When the lifetime scope is disposed, and 
            the cached instance implements <see cref="T:System.IDisposable"/>, that cached instance will be disposed as
            well. Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either the <paramref name="container"/>, or <paramref name="instanceCreator"/> are
            null references.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the
            <typeparamref name="TService"/> has already been registered.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``1(SimpleInjector.Container,System.Boolean)">
            <summary>
            Registers that a single instance of <typeparamref name="TConcrete"/> will be returned for
            each lifetime scope that has been started using 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>. When the 
            lifetime scope is disposed and <typeparamref name="TConcrete"/> implements <see cref="T:System.IDisposable"/>,
            the cached instance will be disposed as well.
            Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="disposeWhenLifetimeScopeEnds">If set to <c>true</c> the cached instance will be
            disposed at the end of its lifetime.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TConcrete"/> has already been registered.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete"/> is a type
            that can not be created by the container.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container,System.Boolean)">
            <summary>
            Registers that a single instance of <typeparamref name="TImplementation"/> will be returned for
            each lifetime scope that has been started using 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>.  When the lifetime scope is disposed, 
            <paramref name="disposeWhenLifetimeScopeEnds"/> is set to <b>true</b>, and the cached instance
            implements <see cref="T:System.IDisposable"/>, that cached instance will be disposed as well.
            Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
            <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="disposeWhenLifetimeScopeEnds">If set to <c>true</c> the cached instance will be
            disposed at the end of its lifetime.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TService"/> has already been registered.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation"/> 
            type is not a type that can be created by the container.
            </exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``1(SimpleInjector.Container,System.Func{``0},System.Boolean)">
            <summary>
            Registers the specified delegate that allows returning instances of <typeparamref name="TService"/>,
            and returned instances are cached during the lifetime of a given scope that has been started using
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">BeginLifetimeScope</see>. When the lifetime scope is disposed, 
            <paramref name="disposeWhenLifetimeScopeEnds"/> is set to <b>true</b>, and the cached instance
            implements <see cref="T:System.IDisposable"/>, that cached instance will be disposed as well.
            Scopes can be nested, and each scope gets its own instance.
            </summary>
            <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
            <param name="container">The container to make the registrations in.</param>
            <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
            <param name="disposeWhenLifetimeScopeEnds">If set to <c>true</c> the cached instance will be
            disposed at the end of its lifetime.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either the <paramref name="container"/>, or <paramref name="instanceCreator"/> are
            null references.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the
            <typeparamref name="TService"/> has already been registered.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.BeginLifetimeScope(SimpleInjector.Container)">
             <summary>
             Begins a new lifetime scope for the given <paramref name="container"/> on the current thread. 
             Services, registered with 
             <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container)">RegisterLifetimeScope</see> or using
             the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScopeLifestyle"/> and are requested within the same thread as where the 
             lifetime scope is created, are cached during the lifetime of that scope.
             The scope should be disposed explicitly when the scope ends.
             </summary>
             <param name="container">The container.</param>
             <returns>A new <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> instance.</returns>
             <exception cref="T:System.ArgumentNullException">
             Thrown when the <paramref name="container"/> is a null reference.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)"/> has
             not been called previously.</exception>
             <exception cref="T:System.InvalidOperationException">Thrown when the current <paramref name="container"/>
             has both no <b>LifetimeScope</b> registrations <i>and</i> <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)"/> is
             not called. Lifetime scoping must be enabled by calling <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)"/> or
             by registering a service using one of the 
             <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container)">RegisterLifetimeScope</see>
             overloads.
             </exception>
             <example>
             <code lang="cs"><![CDATA[
             using (container.BeginLifetimeScope())
             {
                 var handler container.GetInstance(rootType) as IRequestHandler;
            
                 handler.Handle(request);
             }
             ]]></code>
             </example>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.GetCurrentLifetimeScope(SimpleInjector.Container)">
            <summary>
            Gets the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> that is currently in scope or <b>null</b> when no
            <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> is currently in scope.
            </summary>
            <example>
            The following example registers a <b>ServiceImpl</b> type as transient (a new instance will be
            returned every time) and registers an initializer for that type that will register that instance
            for disposal in the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> in which context it is created:
            <code lang="cs"><![CDATA[
            container.Register<IService, ServiceImpl>();
            container.RegisterInitializer<ServiceImpl>(instance =>
            {
                container.GetCurrentLifetimeScope().RegisterForDisposal(instance);
            });
            ]]></code>
            </example>
            <param name="container">The container.</param>
            <returns>A new <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="container"/> is a null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the current <paramref name="container"/>
            has both no <b>LifetimeScope</b> registrations <i>and</i> <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)"/> is
            not called. Lifetime scoping must be enabled by calling <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.EnableLifetimeScoping(SimpleInjector.Container)"/> or
            by registering a service using one of the 
            <see cref="M:SimpleInjector.SimpleInjectorLifetimeScopeExtensions.RegisterLifetimeScope``2(SimpleInjector.Container)">RegisterLifetimeScope</see>
            overloads.
            </exception>
        </member>
        <member name="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope">
            <summary>
            Thread and container specific cache for services that are registered with one of the 
            <see cref="T:SimpleInjector.SimpleInjectorLifetimeScopeExtensions">RegisterLifetimeScope</see> extension method overloads.
            </summary>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope.RegisterForDisposal(System.IDisposable)">
            <summary>
            Registers the supplied <paramref name="disposable"/> to be disposed when the lifetime scope ends.
            Calling this method is useful for instances that are registered with a lifecycle shorter than
            that of the scope (where possibly multiple instances are created per scope, such as transient
            services, that are registered with one of the <b>Register</b> overloads), but still need to be
            disposed explicitly.
            </summary>
            <example>
            The following example registers a <b>ServiceImpl</b> type as transient (a new instance will be
            returned every time) and registers an initializer for that type that will register that instance
            for disposal in the <see cref="T:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope"/> in which context it is created:
            <code lang="cs"><![CDATA[
            container.Register<IService, ServiceImpl>();
            container.RegisterInitializer<ServiceImpl>(instance =>
            {
                LifetimeScope scope = container.GetCurrentLifetimeScope();
                if (scope != null) scope.RegisterForDisposal(instance);
            });
            ]]></code>
            </example>
            <param name="disposable">The disposable.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="disposable"/> is a null reference.</exception>
        </member>
        <member name="M:SimpleInjector.Extensions.LifetimeScoping.LifetimeScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged 
            resources.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <b>Dispose</b> was called on a different
            thread than where this instance was constructed.</exception>
        </member>
    </members>
</doc>
