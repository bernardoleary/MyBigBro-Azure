using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Compilation;
using System.Web.Http;
using System.Web.Http.Controllers;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;
using Infostructure.MyBigBro.BusinessLogic.GeoSpatial;
using Infostructure.MyBigBro.BusinessLogic.Services;
using Infostructure.MyBigBro.BusinessLogic.WebCam;
using Infostructure.MyBigBro.DataModel.DataAccess;
using Infostructure.MyBigBro.DataModel.Models;
using Infostructure.MyBigBro.Domain;
using Infostructure.MyBigBro.Web.ApiExceptions;
using Infostructure.MyBigBro.Web.Controllers;
using Infostructure.MyBigBro.Web.Properties;
using Microsoft.Practices.Unity;

//using Microsoft.Practices.Unity;

namespace Infostructure.MyBigBro.Web
{
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    // visit http://go.microsoft.com/?LinkId=9394801

    public class WebApiApplication : System.Web.HttpApplication
    {
        protected void ConfigureApi(HttpConfiguration config)
        {
            var unity = new UnityContainer();

            // Add Web API controllers.
            unity.RegisterType<GeoMarkersController>();
            unity.RegisterType<WebCamsController>();
            unity.RegisterType<CapturedImagesGeoMarkerController>();

            // Add database components.
            var settings = new Settings();
            var connectionString = "";
#if DEBUG
            connectionString = settings.connectionStringLocal;
#else
            connectionString = settings.connectionStringHosting;
#endif
            unity.RegisterType<IMyBigBroRepository, MyBigBroRepository>(
                new InjectionConstructor(new MyBigBroContext(connectionString)));

            // Initialise IoC.
            config.DependencyResolver = new IoCContainer(unity);
        } 

        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            WebApiConfig.Register(GlobalConfiguration.Configuration);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
            WebApiExceptionConfig.RegisterExceptions(GlobalConfiguration.Configuration);
            ConfigureApi(GlobalConfiguration.Configuration);
        }
    }
}