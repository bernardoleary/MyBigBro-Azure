using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Infostructure.MyBigBro.BusinessLogic.GeoSpatial;
using Infostructure.MyBigBro.BusinessLogic.Services;
using Infostructure.MyBigBro.BusinessLogic.WebCam;
using Infostructure.MyBigBro.DataModel.DataAccess;
using Infostructure.MyBigBro.DataModel.Models;
using Infostructure.MyBigBro.Domain;
using Infostructure.MyBigBro.ImageStorageServiceAgent;
using Moq;
using NUnit.Framework;

namespace Infostructure.MyBigBro.BusinessLogic.Tests.UnitTests
{
    [TestFixture]
    public class TestGeoMarkerService
    {
        private Mock<IWebCamControl> webCamControl = null;
        private Mock<ILocation> location = null;
        private Mock<IGeoMarker> geoMarker = null;
        private Mock<IWebCam> webCam1 = null;
        private Mock<IWebCam> webCam2 = null;
        private GeoMarkerService geoMarkerService;

        [SetUp]
        public void SetUpUnitTestsWebCamService()
        {
            // arrange
            webCamControl = new Mock<IWebCamControl>();
            location = new Mock<ILocation>();
            geoMarker = new Mock<IGeoMarker>();
            webCam1 = new Mock<IWebCam>();
            webCam2 = new Mock<IWebCam>();
            geoMarkerService = new GeoMarkerService();
        }

        [Test]
        public void TestProcessGeoMarker()
        {
            // arrange
            geoMarkerService.WebCamControl = webCamControl.Object;
            webCam1.SetupProperty(x => x.XCoord, 123.12);
            webCam1.SetupProperty(y => y.YCoord, 123.12);
            webCam2.SetupProperty(x => x.XCoord, 124.12);
            webCam2.SetupProperty(y => y.YCoord, 124.12);
            var webCamList = new List<IWebCam>();
            webCamList.Add(webCam1.Object);
            webCamList.Add(webCam2.Object);
            location.Setup(x => x.GetWebCamsWithinWebCamRadiusOfVisibility(It.IsAny<Point>(), true)).Returns(webCamList);
            geoMarkerService.Location = location.Object;
            geoMarker.SetupProperty(x => x.XCoord, 123.33);
            geoMarker.SetupProperty(y => y.YCoord, 123.33);

            // act
            var result = geoMarkerService.ProcessGeoMarker(geoMarker.Object);

            // assert
            Assert.NotNull(result);
            Assert.AreEqual(result, 2);
        }

        [Test]
        public void TestGetMarkersWithImage()
        {
            // arrange
            var top = 1;
            var mockRepository = new Mock<IMyBigBroRepository>();
            var geoMarker = new GeoMarker
            {
                Id = 234,
                XCoord = 2,
                YCoord = 2,
                MarkerDateTime = DateTime.Now
            };
            var capturedImage = new CapturedImage
            {
                Id = 345,
                WebCamId = 123,
                DateTimeCaptured = DateTime.Now,
                Url = "http://test.com/1"
            };
            var geoMarker2 = new GeoMarker
            {
                Id = 12,
                XCoord = 4,
                YCoord = 4,
                MarkerDateTime = DateTime.Now
            };
            var capturedImage2 = new CapturedImage
            {
                Id = 14,
                WebCamId = 345,
                DateTimeCaptured = DateTime.Now,
                Url = "http://test.com/2"
            };
            var capturedImageGeoMarker = new CapturedImageGeoMarker();
            capturedImageGeoMarker.Id = 789;
            capturedImageGeoMarker.CapturedImageId = capturedImage.Id;
            capturedImageGeoMarker.GeoMarkerId = geoMarker.Id;
            var capturedImageGeoMarker2 = new CapturedImageGeoMarker();
            capturedImageGeoMarker2.Id = 222;
            capturedImageGeoMarker2.CapturedImageId = capturedImage2.Id;
            capturedImageGeoMarker2.GeoMarkerId = geoMarker2.Id;
            mockRepository.Setup(x => x.Set<GeoMarker>()).Returns(new List<GeoMarker> { geoMarker, geoMarker2 }.AsQueryable());
            mockRepository.Setup(x => x.Set<CapturedImage>()).Returns(new List<CapturedImage> { capturedImage, capturedImage2 }.AsQueryable());
            mockRepository.Setup(x => x.Set<CapturedImageGeoMarker>()).Returns(new List<CapturedImageGeoMarker> { capturedImageGeoMarker }.AsQueryable());

            // act
            var result = geoMarkerService.GetMarkersWithImage(mockRepository.Object, top);

            // assert            
            Assert.IsInstanceOf<IEnumerable<ICapturedImageGeoMarkerDetail>>(result);
            var first = result.FirstOrDefault();
            Assert.NotNull(first.GeoMarker);
            Assert.NotNull(first.CapturedImage);
            // Test ordering is working fine
            Assert.AreEqual(345, first.CapturedImage.Id);
        }
    }
}
