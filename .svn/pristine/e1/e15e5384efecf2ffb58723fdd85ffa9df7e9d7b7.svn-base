using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Transactions;
using Infostructure.MyBigBro.BusinessLogic.GeoSpatial;
using Infostructure.MyBigBro.BusinessLogic.WebCam;
using Infostructure.MyBigBro.DataModel.DataAccess;
using Infostructure.MyBigBro.DataModel.Models;
using Infostructure.MyBigBro.Domain;
using Infostructure.MyBigBro.ImageStorageServiceAgent;

namespace Infostructure.MyBigBro.BusinessLogic.Services
{
    public class MyBigBroService : IMyBigBroService
    {
        private IWebCamControl _webCamControl = null;
        private ILocation _location = null;

        public IWebCamControl WebCamControl
        {
            get { return _webCamControl; }
            set { _webCamControl = value; }
        }

        public ILocation Location
        {
            get { return _location; }
            set { _location = value; }
        }

        // Returns the number of webcams that can see us at our current location.
        // Is this method doing too much?
        public int ProcessGeoMarker(IGeoMarker geoMarker)
        {
            // Add the GeoMarker to the database and get the ID.
            var geoMarkerId = _location.AppendGeoMarker(geoMarker);

            // Get the list of webcams that we might be able to see us at our current location.
            var webCamsWithinWebCamRadiusOfVisibility = 
                _location.GetWebCamsWithinWebCamRadiusOfVisibility(new Point
                                                                    {
                                                                        XCoord = geoMarker.XCoord,
                                                                        YCoord = geoMarker.YCoord
                                                                    });

            // If there are any webcams that can see us...
            if (webCamsWithinWebCamRadiusOfVisibility.Count > 0)
            {
                foreach (var webCam in webCamsWithinWebCamRadiusOfVisibility)
                {
                    using (var trans = new TransactionScope())
                    {
                        // Capture and add the image to the DB.
                        // Future modification - only capture an image if one has not been recently (within seconds) captured for that webcam.
                        // Future modification - remove this internal dependency on WebCamImage (make a factory?).
                        // Future modification - remove this internal dependency on AwsStorageServiceAgent (could be done using the IoC container?).
                        _webCamControl.WebCam = webCam;
                        _webCamControl.WebCamImage = new WebCamImage();
                        _webCamControl.StorageServiceAgent = new AwsStorageServiceAgent();
                        _webCamControl.CaptureCurrentImage(new WebCamDataRequest());
                        _webCamControl.CapturedImage = new CapturedImage();
                        var capturedImageId = _webCamControl.StoreCapturedImage();

                        // Map the image to the GeoMarker
                        // Refactor this method so that it takes a complex type, rather than two primitives.
                        _location.MapCapturedImageToGeoMarker(capturedImageId, geoMarkerId);

                        // commit the change
                        trans.Complete();
                    }
                }
            }

            // Return the count of images collected.
            return webCamsWithinWebCamRadiusOfVisibility.Count;
        }
    }
}
